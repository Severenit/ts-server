import { ServerRoute } from '@hapi/hapi';

import { Game } from '../game/core/game.js';

import { createActiveGame, deleteActiveGame, getActiveGameByGameId, updateUserStats } from '../keystone-api/game.js';
import { errorHandler, sendLogToTelegram } from '../utils/error.js';
import { GameState, PlayerCard } from '../types/game.js';
import { Card } from '../game/core/card.js';
import { addCardToPlayer, deletePlayerCard } from '../keystone-api/user.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç
function restoreCards(cards: PlayerCard[], boardName: string) {
  console.log('cards', cards);
  if (!cards) {
    sendLogToTelegram('–ú–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç –ø—É—Å—Ç–æ–∏ÃÜ –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    return [];
  }

  // sendLogToTelegram('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã - ' + boardName, { cards: cards.map(c => c?.id) });

  const deck = Card.createDeck();

  return cards.map(cardData => {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –¥–æ—Å–∫–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!cardData) {
      return null;
    }

    if (!cardData.id) {
      const message = '‚ö†Ô∏è Card data has no ID';
      console.log(message, cardData);
      sendLogToTelegram(message, cardData);
      return null;
    }

    const card = deck.find((c: Card) => c.id === cardData.id);
    if (!card) {
      const message = `‚ùå Card ${cardData.id} not found in deck`;
      console.log(message);
      sendLogToTelegram(message);
      return null;
    }

    try {
      const restoredCard = card.clone();

      if (!restoredCard) {
        const message = `‚ùå Failed to clone card ${card.id}`;
        console.log(message);
        sendLogToTelegram(message);
        return null;
      }

      restoredCard.owner = cardData.owner;
      restoredCard.position = cardData.position;

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–∞—Ä—Ç—É ${cardData.id}`);
      return restoredCard;
    } catch (error) {
      const message = `‚ùå Error restoring card ${cardData.id}`;
      console.error(message, error);
      sendLogToTelegram(message, { error, cardData });
      return null;
    }
  }).filter((card: Card | null): card is Card => card !== null);
}

// Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä
const gameStates = new Map();
// Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ gameId
const lastRequestTimes = new Map();
// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
const MIN_REQUEST_INTERVAL = 2000;

// Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä
const deletedGames = new Set();

// –§–ª–∞–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
const MAINTENANCE_MODE = true;

interface PlayerCardSettings {
  cardInfo: {
    id: string;
  };
}

interface GamePayload {
  level: number;
  settings: {
    userId: string; playerCards?: Array<PlayerCardSettings>;
  };
}

interface PlayerMovePayload {
  cardIndex: number;
  position: number;
}

interface ExchangeCardPayload {
  cardId: string;
}

interface UpdateGameStatsPayload {
  statsId: string;
  isWin: boolean;
  isDraw: boolean;
  wonCards: string[];
  lostCards: string[];
}

export const gameRoutes: Record<string, ServerRoute> = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  createGame: {
    method: 'POST' as const, path: '/api/game/new', handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      try {
        const gameId = Date.now().toString();
        const { settings: s, level } = request.payload as GamePayload;
        const settings: GamePayload['settings'] = typeof s === 'string' ? JSON.parse(s) : s;

        if (!settings?.userId) {
          throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
        }

        const gameSettings = {
          AI_PLAYER: 'BALANCED', AI_OPPONENT: 'BALANCED', ...settings,
        };

        const rules = {
          OPEN: level < 2,
          SAME: level > 3,
          SAME_WALL: level > 4,
          PLUS: level > 5,
          COMBO: level > 6,
          ELEMENTAL: level > 7,
          SUDDEN_DEATH: level > 8,
        };

        const game = new Game(gameSettings, rules);

        // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
        let playerCardIds: string[] = [];

        if (settings?.playerCards && Array.isArray(settings.playerCards)) {
          playerCardIds = settings.playerCards.map(card => card.cardInfo.id);
        }

        if (playerCardIds.length !== 5) {
          throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å 5 –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${playerCardIds.length}`);
        }

        const gameState = game.initializeGame(playerCardIds) as GameState;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –ø–∞–º—è—Ç–∏
        gameStates.set(gameId, game);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const activeGame = await createActiveGame(String(settings.userId), gameId, gameState, true, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        );

        return {
          gameId, status: 'created', gameState, activeGame: {
            id: activeGame.id, gameId: activeGame.gameId,
          },
        };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', (error as Error).stack);
        return errorHandler({
          h,
          details: (error as Error).message,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É',
          stack: (error as Error).stack,
          code: 500,
        });
      }
    },
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  getGameState: {
    method: 'GET' as const, path: '/api/game/{gameId}', handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      const { gameId } = request.params;

      try {
        let game = gameStates.get(gameId);

        if (!game) {
          const activeGame = await getActiveGameByGameId(gameId);

          if (!activeGame) {
            return errorHandler({
              h,
              details: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
              error: 'Game not found',
              code: 404
            });
          }

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
          const savedState = activeGame.gameState;
          game = new Game(savedState.settings || {}, savedState.rules || {});

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã
          game.board = restoreCards(savedState.board, 'board');
          game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
          game.aiHand = restoreCards(savedState.aiHand, 'aiHand');
          game.originalPlayerCards = savedState.originalPlayerCards ? restoreCards(savedState.originalPlayerCards, 'originalPlayerCards') : game.playerHand.map(card => card.clone());
          game.originalAiCards = savedState.originalAiCards ? restoreCards(savedState.originalAiCards, 'originalAiCards') : game.aiHand.map(card => card.clone());

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          game.currentTurn = savedState.currentTurn || 'player';
          game.playerScore = savedState.playerScore || 5;
          game.aiScore = savedState.aiScore || 5;
          game.gameStatus = savedState.gameStatus || 'playing';
          game.winner = savedState.winner || null;
          game.suddenDeathRound = savedState.suddenDeathRound || 0;
          game.boardElements = Array.isArray(savedState.boardElements) ? savedState.boardElements : Array(9).fill(null);
          game.cardExchange = savedState.cardExchange || null;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          gameStates.set(gameId, game);
        }

        return game.getState();
      } catch (error) {
        console.error('Error getting game state:', error);
        return errorHandler({
          h,
          details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã',
          error,
          code: 500
        });
      }
    }
  },

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
  playerMove: {
    method: 'POST' as const, path: '/api/game/{gameId}/player-move', handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      const { gameId } = request.params;
      const { cardIndex, position } = request.payload as PlayerMovePayload;

      try {
        let game = gameStates.get(gameId);

        if (!game) {
          // await sendLogToTelegram('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –∏–∑ –ë–î (—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞)', { gameId });
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const activeGame = await getActiveGameByGameId(gameId);

            if (!activeGame) {
              return errorHandler({
                h,
                details: '–ö–∞–∂–µ—Ç—Å—è –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ :(',
                stack: JSON.stringify({
                  gameId,
                  availableGames: Array.from(gameStates.keys()),
                }),
                error: 'Game not found', code: 404,
              });
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            const savedState = activeGame.gameState;
            game = new Game(savedState.settings || {}, savedState.rules || {});
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å–∫—É
            if (!Array.isArray(savedState.board)) {
              await sendLogToTelegram('‚ö†Ô∏è –î–æ—Å–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º', {
                board: savedState.board, type: typeof savedState.board,
              });
              game.board = Array(9).fill(null);
            } else if (savedState.board.length !== 9) {
              await sendLogToTelegram('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ—Å–∫–∏', {
                length: savedState.board.length,
              });

              game.board = Array(9).fill(null);
            } else {
              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ –¥–æ—Å–∫–µ
              const restoredBoard = restoreCards(savedState.board, 'restoredBoard');
              game.board = Array(9).fill(null);
              // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è null –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
              savedState.board.forEach((card: Card | null, index: number) => {
                if (card) {
                  game.board[index] = restoredBoard.find(c => c.id === card.id) || null;
                }
              });
            }

            game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
            game.aiHand = restoreCards(savedState.aiHand, 'aiHand');

            // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
            if (savedState.originalPlayerCards && savedState.originalAiCards) {
              game.originalPlayerCards = restoreCards(savedState.originalPlayerCards, 'originalPlayerCards');
              game.originalAiCards = restoreCards(savedState.originalAiCards, 'originalAiCards');
            } else {
              // –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä—É–∫
              game.originalPlayerCards = game.playerHand.map((card: Card) => card.clone());
              game.originalAiCards = game.aiHand.map((card: Card) => card.clone());
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            // await sendLogToTelegram('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentTurn', {
            //   savedTurn: savedState.currentTurn, defaultTurn: 'player',
            // });
            game.currentTurn = savedState.currentTurn || 'player';
            game.playerScore = savedState.playerScore || 5;
            game.aiScore = savedState.aiScore || 5;
            game.gameStatus = savedState.gameStatus || 'playing';
            game.winner = savedState.winner || null;
            game.suddenDeathRound = savedState.suddenDeathRound || 0;
            game.boardElements = Array.isArray(savedState.boardElements) ? savedState.boardElements : Array(9).fill(null);
            game.cardExchange = savedState.cardExchange || null;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            // const validationState = {
            //   board: {
            //     isArray: Array.isArray(game.board), length: game.board?.length, content: game.board,
            //   }, aiHand: {
            //     isArray: Array.isArray(game.aiHand),
            //     length: game.aiHand?.length,
            //     cards: game.aiHand?.map((c: Card | null) => c?.id),
            //   }, currentTurn: game.currentTurn,
            // };

            // await sendLogToTelegram('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º', validationState);

            if (!Array.isArray(game.board) || game.board.length !== 9) {
              await sendLogToTelegram('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ—Å–∫–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
              return errorHandler({
                h, details: 'Invalid board state after restoration', error: 'Game state error', code: 500,
              });
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            gameStates.set(gameId, game);
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
            await sendLogToTelegram('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã', {
              error: error instanceof Error ? error.message : String(error),
              gameId,
              stack: error instanceof Error ? error.stack : undefined,
            });
            return errorHandler({
              h, details: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã', error, code: 500,
            });
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –∏–≥—Ä–æ–∫–∞
        // const gameStateBeforeMove = {
        //   board: {
        //     isArray: Array.isArray(game.board),
        //     length: game.board.length,
        //     content: game.board,
        //     nullPositions: game.board
        //       .map((cell: Card | null, index: number) => ({ pos: index, isEmpty: cell === null }))
        //       .filter((pos: { pos: number; isEmpty: boolean }) => pos.isEmpty)
        //       .map((pos: { pos: number }) => pos.pos),
        //   },
        //   playerHand: {
        //     length: game.playerHand?.length,
        //     cards: game.playerHand?.map((c: Card | null) => c?.id),
        //   },
        //   currentTurn: game.currentTurn,
        // };
        // TODO: Turn on when if we want see logs
        // await sendLogToTelegram('üéÆ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –∏–≥—Ä–æ–∫–∞', gameStateBeforeMove);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
        if (game.currentTurn !== 'player') {
          await sendLogToTelegram('‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ–≥–¥–∞ currentTurn !== player', {
            currentTurn: game.currentTurn, gameStatus: game.gameStatus,
          });
          return errorHandler({
            h, details: '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥', error: 'Not player\'s turn', code: 400,
          });
        }
        console.log('....cardIndex', cardIndex);
        console.log('....position', position);
        const result = game.makeMove(cardIndex, position);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          const gameState = game.getState();
          // await sendLogToTelegram('üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —Ö–æ–¥–∞', {
          //     userId: game.settings.userId,
          //     gameId,
          //     board: gameState.board.map((card: Card | null) => card ? { id: card.id, name: card.name } : null),
          //     currentTurn: gameState.currentTurn,
          //     stateSize: JSON.stringify(gameState).length
          // });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
          // const existingGame = await getActiveGameByGameId(gameId);
          //
          // if (!existingGame) {
          //     await sendLogToTelegram('‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º', { gameId });
          //     return errorHandler({
          //         h,
          //         details: 'Game not found in database before update',
          //         error: 'Game state error',
          //         code: 404
          //     });
          // }

          await createActiveGame(game.settings.userId, gameId, gameState);

          // await sendLogToTelegram('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', {
          //     gameId,
          //     currentTurn: gameState.currentTurn
          // });

          return {
            status: 'move completed', gameState: gameState, moveResult: result,
          };
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', {
            error,
            errorMessage: error instanceof Error ? error.message : 'Unknown error',
            stack: error instanceof Error ? error.stack : undefined,
          });

          await sendLogToTelegram('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', {
            error: error instanceof Error ? error.message : String(error),
            gameId,
            stack: error instanceof Error ? error.stack : undefined,
          });

          return errorHandler({
            h, details: 'Failed to update game state', error, code: 500,
          });
        }
      } catch (error) {
        console.error('‚ùå Error in player move:', {
          error,
          errorMessage: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined,
        });

        return errorHandler({
          h,
          details: error instanceof Error ? error.message : 'Error in player move',
          error: 'Error in player move',
          code: 400,
          stack: error instanceof Error ? error.stack : undefined,
        });
      }
    },
  }, //
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ AI
  aiMove: {
    method: 'GET' as const, path: '/api/game/{gameId}/ai-move', handler: async (request, h) => {
      const { gameId } = request.params;

      try {
        let game = gameStates.get(gameId);

        if (!game) {
          // await sendLogToTelegram('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –∏–∑ –ë–î (—Ö–æ–¥ AI)', { gameId });
          // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const activeGame = await getActiveGameByGameId(gameId);

          if (!activeGame) {
            return errorHandler({
              h,
              details: '–ö–∞–∂–µ—Ç—Å—è –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ :(',
              stack: JSON.stringify({
                gameId,
                availableGames: Array.from(gameStates.keys()),
              }),
              error: 'Game not found', code: 404,
            });
          }

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
          const savedState = activeGame.gameState;
          game = new Game(savedState.settings || {}, savedState.rules || {});

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å–∫—É
          if (!Array.isArray(savedState.board)) {
            await sendLogToTelegram('‚ö†Ô∏è –î–æ—Å–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º', {
              board: savedState.board, type: typeof savedState.board,
            });
            game.board = Array(9).fill(null);
          } else if (savedState.board.length !== 9) {
            await sendLogToTelegram('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ—Å–∫–∏', {
              length: savedState.board.length,
            });
            game.board = Array(9).fill(null);
          } else {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ –¥–æ—Å–∫–µ
            const restoredBoard = restoreCards(savedState.board, 'restoredBoard');
            game.board = Array(9).fill(null);
            // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è null –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            savedState.board.forEach((card: Card | null, index: number) => {
              if (card) {
                game.board[index] = restoredBoard.find(c => c.id === card.id) || null;
              }
            });

            // await sendLogToTelegram('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ—Å–∫–∞', {
            //     board: game.board.map((card: Card | null) => card ? { id: card.id, name: card.name } : null)
            // });
          }

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
          game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
          game.aiHand = restoreCards(savedState.aiHand, 'aiHand');

          // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
          if (savedState.originalPlayerCards && savedState.originalAiCards) {
            game.originalPlayerCards = restoreCards(savedState.originalPlayerCards, 'originalPlayerCards');
            game.originalAiCards = restoreCards(savedState.originalAiCards, 'originalAiCards');
          } else {
            // –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä—É–∫
            game.originalPlayerCards = game.playerHand.map((card: Card) => card.clone());
            game.originalAiCards = game.aiHand.map((card: Card) => card.clone());
          }

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          await sendLogToTelegram('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentTurn', {
            savedTurn: savedState.currentTurn, defaultTurn: 'player',
          });
          game.currentTurn = savedState.currentTurn || 'player';
          game.playerScore = savedState.playerScore || 5;
          game.aiScore = savedState.aiScore || 5;
          game.gameStatus = savedState.gameStatus || 'playing';
          game.winner = savedState.winner || null;
          game.suddenDeathRound = savedState.suddenDeathRound || 0;
          game.boardElements = Array.isArray(savedState.boardElements) ? savedState.boardElements : Array(9).fill(null);
          game.cardExchange = savedState.cardExchange || null;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
          const validationState = {
            board: {
              isArray: Array.isArray(game.board), length: game.board?.length, content: game.board,
            }, aiHand: {
              isArray: Array.isArray(game.aiHand),
              length: game.aiHand?.length,
              cards: game.aiHand?.map((c: Card | null) => c?.id),
            }, currentTurn: game.currentTurn,
          };

          await sendLogToTelegram('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º', validationState);

          if (!Array.isArray(game.board) || game.board.length !== 9) {
            await sendLogToTelegram('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ—Å–∫–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
            return errorHandler({
              h, details: 'Invalid board state after restoration', error: 'Game state error', code: 500,
            });
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          gameStates.set(gameId, game);
        }

        if (game.currentTurn !== 'ai') {
          return h.response({
            error: 'Not AI\'s turn', details: {
              currentTurn: game.currentTurn,
            },
          }).code(400);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º AI
        const gameStateBeforeMove = {
          board: {
            isArray: Array.isArray(game.board),
            length: game.board.length,
            content: game.board,
            nullPositions: game.board
              .map((cell: Card | null, index: number) => ({ pos: index, isEmpty: cell === null }))
              .filter((pos: { pos: number; isEmpty: boolean }) => pos.isEmpty)
              .map((pos: { pos: number }) => pos.pos),
          }, aiHand: {
            length: game.aiHand?.length, cards: game.aiHand?.map((c: Card | null) => c?.id),
          }, currentTurn: game.currentTurn,
        };
        // TODO: Turn on logging
        //await sendLogToTelegram('üéÆ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º AI', gameStateBeforeMove);

        // if (gameStateBeforeMove.board.nullPositions.length === 0) {
        //     await sendLogToTelegram('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ö–æ–¥–∞', gameStateBeforeMove);
        //     return errorHandler({
        //         h,
        //         details: 'No available positions for move',
        //         error: 'Game state error',
        //         code: 400
        //     });
        // }

        if (!game.aiHand || game.aiHand.length === 0) {
          await sendLogToTelegram('‚ùå –†—É–∫–∞ AI –ø—É—Å—Ç–∞', game.aiHand);
          return errorHandler({
            h, details: 'AI has no cards', error: 'Game state error', code: 400,
          });
        }

        try {
          const result = game.makeAIMove();
          // // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞
          // await sendLogToTelegram('‚úÖ –•–æ–¥ AI –≤—ã–ø–æ–ª–Ω–µ–Ω', {
          //     moveResult: result,
          //     newBoardState: game.board?.map((c: Card | null) => c?.id),
          //     remainingAiCards: game.aiHand?.map((c: Card | null) => c?.id)
          // });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await createActiveGame(game.settings.userId, gameId, game.getState());

          return {
            status: 'move completed', gameState: game.getState(), moveResult: result,
          };
        } catch (error) {
          await sendLogToTelegram('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞ AI', {
            error: error instanceof Error ? error.message : 'Unknown error', gameState: game.getState(),
          });
          throw error;
        }
      } catch (error) {
        console.error('‚ùå Error in AI move:', error);
        return errorHandler({
          h,
          details: error instanceof Error ? error.message : 'Error in AI move',
          error: 'Error in AI move',
          code: 400,
          stack: error instanceof Error ? error.stack : undefined,
        });
      }
    },
  }, //
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç AI –¥–ª—è –æ–±–º–µ–Ω–∞
  getAvailableCards: {
    method: 'GET' as const, path: '/api/game/{gameId}/available-cards', handler: (request, h) => {
      const { gameId } = request.params;
      const game = gameStates.get(gameId);

      if (!game) {
        return h.response({
          error: 'Game not found', details: {
            gameId, availableGames: Array.from(gameStates.keys()),
          },
        }).code(404);
      }

      if (game.gameStatus !== 'finished' || game.winner !== 'player' || game.cardExchange) {
        return h.response({
          error: 'Cards are only available for winner player before exchange', details: {
            gameStatus: game.gameStatus, winner: game.winner, exchangePerformed: !!game.cardExchange,
          },
        }).code(400);
      }

      return {
        status: 'success', cards: game.originalAiCards.map((card: Card) => card.toClientObject(false)),
      };
    },
  },

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏
  exchangeCard: {
    method: 'POST' as const, path: '/api/game/{gameId}/exchange-card', handler: async (request, h) => {
      console.log('üìå: –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏');
      // await sendLogToTelegram('üìå –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏');

      const { gameId } = request.params;
      const { cardId } = request.payload as ExchangeCardPayload || {};
      let game = gameStates.get(gameId);

      if (!game) {
        await sendLogToTelegram('üîÑ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ë–î', { gameId });
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const activeGame = await getActiveGameByGameId(gameId);
        if (!activeGame) {
          return errorHandler({
            h,
            details: '–ö–∞–∂–µ—Ç—Å—è –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ :(',
            stack: JSON.stringify({
              gameId,
              availableGames: Array.from(gameStates.keys()),
            }),
            error: 'Game not found', code: 404,
          });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        const savedState = activeGame.gameState;
        game = new Game(savedState.settings || {}, savedState.rules || {});

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç');
        game.board = restoreCards(savedState.board, 'board');
        game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
        game.aiHand = restoreCards(savedState.aiHand, 'aiHand');

        // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        if (savedState.originalPlayerCards && Array.isArray(savedState.originalPlayerCards)) {
          game.originalPlayerCards = restoreCards(savedState.originalPlayerCards, 'originalPlayerCards');
        } else {
          console.log('‚ö†Ô∏è originalPlayerCards –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ playerHand');
          game.originalPlayerCards = game.playerHand.map((card: Card) => card.clone());
        }

        if (savedState.originalAiCards && Array.isArray(savedState.originalAiCards)) {
          game.originalAiCards = restoreCards(savedState.originalAiCards, 'originalAiCards');
          await sendLogToTelegram('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã AI', {
            count: game.originalAiCards.length,
            cards: game.originalAiCards.map((c: Card) => ({ id: c.id, name: c.name })),
          });
        } else {
          console.log('‚ö†Ô∏è originalAiCards –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ aiHand');
          game.originalAiCards = game.aiHand.map((card: Card) => card.clone());
          await sendLogToTelegram('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–∞—Ä—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–π —Ä—É–∫–∏ AI –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ', {
            count: game.originalAiCards.length,
            cards: game.originalAiCards.map((c: Card) => ({ id: c.id, name: c.name })),
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
        const cardsState = {
          board: {
            length: game.board?.length, cards: game.board?.map((c: Card | null) => c?.id),
          }, playerHand: {
            length: game.playerHand?.length, cards: game.playerHand?.map((c: Card | null) => c?.id),
          }, aiHand: {
            length: game.aiHand?.length, cards: game.aiHand?.map((c: Card | null) => c?.id),
          }, originalPlayerCards: {
            length: game.originalPlayerCards?.length, cards: game.originalPlayerCards?.map((c: Card | null) => c?.id),
          }, originalAiCards: {
            length: game.originalAiCards?.length, cards: game.originalAiCards?.map((c: Card | null) => c?.id),
          },
        };

        console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:', cardsState);
        // await sendLogToTelegram('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', cardsState);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        game.currentTurn = savedState.currentTurn;
        game.playerScore = savedState.playerScore;
        game.aiScore = savedState.aiScore;
        game.gameStatus = savedState.gameStatus;
        game.winner = savedState.winner;
        game.suddenDeathRound = savedState.suddenDeathRound || 0;
        game.boardElements = savedState.boardElements;
        game.cardExchange = savedState.cardExchange;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        gameStates.set(gameId, game);
      }

      if (game.gameStatus !== 'finished' || game.winner === 'draw') {
        return errorHandler({
          h,
          details: `–û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º. –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: ${game.gameStatus}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${game.winner}`,
          error: '–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏',
          code: 400,
        });
      }

      if (game.cardExchange) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±–º–µ–Ω–µ
        if (!game.cardExchange.takenCard) {
          return errorHandler({
            h, details: '–ö–∞—Ä—Ç–∞ –æ–±–º–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', error: '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–º–µ–Ω–∞', code: 500,
          });
        }

        // –ï—Å–ª–∏ –æ–±–º–µ–Ω —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞
        return {
          status: 'success', exchange: {
            type: game.cardExchange.type,
            card: game.cardExchange.takenCard.toClientObject(false),
            message: game.cardExchange.message,
            gameId: gameId,
            isRepeated: true,
          },
        };
      }

      try {
        let exchangeResult;

        if (game.winner === 'player') {
          await sendLogToTelegram('üë§ –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç', {
            requestedCardId: cardId, availableCards: game.originalAiCards.map((c: Card | null) => ({
              id: c?.id, name: c?.name, isNull: c === null,
            })),
          });

          if (!cardId) {
            return errorHandler({
              h,
              details: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é –∫–∞—Ä—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
              error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞',
              code: 400,
            });
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç AI
          if (!game.originalAiCards || !Array.isArray(game.originalAiCards)) {
            console.error('‚ùå –û—à–∏–±–∫–∞ originalAiCards:', {
              originalAiCards: game.originalAiCards,
              isArray: Array.isArray(game.originalAiCards),
              type: typeof game.originalAiCards,
            });
            return errorHandler({
              h, details: '–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', error: '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', code: 500,
            });
          }

          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç AI –ø–µ—Ä–µ–¥ –æ–±–º–µ–Ω–æ–º:', {
            requestedCardId: cardId, availableCards: game.originalAiCards.map((c: Card | null) => ({
              id: c?.id, name: c?.name, isNull: c === null,
            })),
          });

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const deck = Card.createDeck();
          const deckCard = deck.find(c => c.id === cardId);

          if (!deckCard) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥–µ:', {
              requestedCardId: cardId, availableCardIds: deck.map(c => c.id),
            });
            return errorHandler({
              h, details: `–ö–∞—Ä—Ç–∞ —Å ID ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥–µ`, error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç—ã', code: 400,
            });
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö AI
          const selectedCard = game.originalAiCards.find((card: Card | null) => {
            if (!card) {
              console.log('‚ö†Ô∏è Found null card in originalAiCards');
              return false;
            }
            const isMatch = card.id === cardId;
            console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É ${card.id} —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π ${cardId}: ${isMatch}`);
            return isMatch;
          });

          if (!selectedCard) {
            return errorHandler({
              h,
              details: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ (${cardId}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä—É–∫–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞`,
              error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç—ã',
              code: 400,
            });
          }

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          const clonedCard = deckCard.clone();
          if (!clonedCard) {
            return errorHandler({
              h, details: '–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É', error: '–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã', code: 500,
            });
          }

          // –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
          clonedCard.owner = selectedCard.owner;
          clonedCard.position = selectedCard.position;

          exchangeResult = {
            type: 'player_win', takenCard: clonedCard, message: `–í—ã –∑–∞–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É ${selectedCard.name}!`,
          };
        } else {
          if (!game.getCardExchange || typeof game.getCardExchange !== 'function') {
            return errorHandler({
              h, details: '–ú–µ—Ç–æ–¥ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', error: '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', code: 500,
            });
          }

          exchangeResult = game.getCardExchange();
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–º–µ–Ω–∞
          if (!exchangeResult || !exchangeResult.takenCard) {
            return errorHandler({
              h, details: 'Invalid exchange result', error: 'Failed to perform card exchange', code: 500,
            });
          }
        }

        if (!exchangeResult) {
          return errorHandler({
            h, details: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏', error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–º–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', code: 400,
          });
        }

        game.cardExchange = exchangeResult;

        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const isWin = game.winner === 'player';
          const isDraw = game.winner === 'draw';
          const wonCards: string[] = isWin ? [exchangeResult.takenCard.id] : [];
          const lostCards: string[] = !isWin && !isDraw ? [exchangeResult.takenCard.id] : [];

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          await updateUserStats(game.settings.userId, isWin, isDraw, wonCards, lostCards);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
          if (isWin) {
            // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∫–∞—Ä—Ç—É AI
            await addCardToPlayer(game.settings.userId, exchangeResult.takenCard.id);
          } else if (!isDraw) {
            // AI –≤—ã–∏–≥—Ä–∞–ª - —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É —É –∏–≥—Ä–æ–∫–∞
            await deletePlayerCard(game.settings.userId, exchangeResult.takenCard.id);
          }

          // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          await deleteActiveGame(gameId);
        } catch (error) {
          console.error('Error updating game data:', error);
          return errorHandler({
            h, details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã', error, code: 500,
          });
        }

        return {
          status: 'success', exchange: {
            type: exchangeResult.type,
            card: exchangeResult.takenCard.toClientObject(false),
            message: exchangeResult.message,
            gameId: gameId,
          },
        };
      } catch (error) {
        console.error('Error in card exchange:', error);
        return errorHandler({
          h, details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–∞—Ä—Ç–∞–º–∏', error, code: 500,
        });
      }
    },
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
  updateGameStats: {
    method: 'POST' as const, path: '/api/game/{gameId}/stats', handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      const { gameId } = request.params;
      const { statsId, isWin, isDraw, wonCards = [], lostCards = [] } = request.payload as UpdateGameStatsPayload;

      if (!statsId) {
        return h.response({
          error: 'Stats ID is required', details: {
            message: 'Please provide userId in the request payload',
          },
        }).code(400);
      }

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        // @ts-ignore
        const stats = await updateUserStats(statsId, isWin, isDraw, wonCards, lostCards);

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
          await deleteActiveGame(gameId);
        } catch (error) {
          console.error('Error deleting active game:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        }

        return {
          status: 'success', stats,
        };
      } catch (error) {
        console.error('Error updating game stats:', error);
        return errorHandler({
          h, details: 'Error updating game stats', error, code: 500,
        });
      }
    },
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
  deleteGame: {
    method: 'DELETE' as const, path: '/api/game/{gameId}', handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      const { gameId } = request.params;

      try {
        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –ø–∞–º—è—Ç–∏
        gameStates.delete(gameId);

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await deleteActiveGame(gameId);

        return {
          status: 'success',
          message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
          gameId
        };
      } catch (error) {
        console.error('Error deleting game:', error);
        return errorHandler({
          h,
          details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã',
          error,
          code: 500
        });
      }
    }
  },
};
