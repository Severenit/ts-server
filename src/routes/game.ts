import { ServerRoute } from '@hapi/hapi';

import { Game } from '../game/core/game.js';

import { createActiveGame, deleteActiveGame, getActiveGameByGameId, updateUserStats } from '../keystone-api/game.js';
import { errorHandler, sendLogToTelegram } from '../utils/error.js';
import { GameState, PlayerCard } from '../types/game.js';
import { Card } from '../game/core/card.js';
import { addCardToPlayer, deletePlayerCard } from '../keystone-api/user.js';
import { API_VERSION, MIN_SUPPORTED_VERSION, versionCheck } from '../utils/versionCheck.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç
function restoreCards(cards: PlayerCard[], boardName: string) {
  console.log('cards', cards);
  if (!cards) {
    sendLogToTelegram('–ú–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç –ø—É—Å—Ç–æ–∏ÃÜ –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    return [];
  }

  // sendLogToTelegram('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã - ' + boardName, { cards: cards.map(c => c?.id) });

  const deck = Card.createDeck();

  return cards.map(cardData => {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –¥–æ—Å–∫–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!cardData) {
      return null;
    }

    if (!cardData.id) {
      const message = '‚ö†Ô∏è Card data has no ID';
      console.log(message, cardData);
      sendLogToTelegram(message, cardData);
      return null;
    }

    const card = deck.find((c: Card) => c.id === cardData.id);
    if (!card) {
      const message = `‚ùå Card ${cardData.id} not found in deck`;
      console.log(message);
      sendLogToTelegram(message);
      return null;
    }

    try {
      const restoredCard = card.clone();

      if (!restoredCard) {
        const message = `‚ùå Failed to clone card ${card.id}`;
        console.log(message);
        sendLogToTelegram(message);
        return null;
      }

      restoredCard.owner = cardData.owner;
      restoredCard.position = cardData.position;

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–∞—Ä—Ç—É ${cardData.id}`);
      return restoredCard;
    } catch (error) {
      const message = `‚ùå Error restoring card ${cardData.id}`;
      console.error(message, error);
      sendLogToTelegram(message, { error, cardData });
      return null;
    }
  }).filter((card: Card | null): card is Card => card !== null);
}

const nonExistentGames = new Set();

// –§–ª–∞–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
const MAINTENANCE_MODE = false;

// Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
const requestCounts = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function logRequest(gameId: string, telegramData: string, request: any) {
  const now = Date.now();
  const key = `${gameId}_${request.info.remoteAddress}`;
  const count = (requestCounts.get(key) || 0) + 1;
  requestCounts.set(key, count);

  if (count > 10) { // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ IP –∫ –æ–¥–Ω–æ–π –∏–≥—Ä–µ
    await sendLogToTelegram('üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', {
      gameId,
      ip: request.info.remoteAddress,
      userAgent: request.headers['user-agent'],
      requestCount: count,
      path: request.path,
      method: request.method,
      timestamp: new Date().toISOString(),
      referer: request.headers.referer || 'unknown',
      telegramData,
    });

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (nonExistentGames.has(gameId)) {
      return true; // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    }
  }
  return false;
}

interface PlayerCardSettings {
  cardInfo: {
    id: string;
  };
}

interface GamePayload {
  level: number;
  settings: {
    userId: string; playerCards?: Array<PlayerCardSettings>;
  };
}

interface PlayerMovePayload {
  cardIndex: number;
  position: number;
}

interface ExchangeCardPayload {
  cardId: string;
}

interface UpdateGameStatsPayload {
  statsId: string;
  isWin: boolean;
  isDraw: boolean;
  wonCards: string[];
  lostCards: string[];
}

export const gameRoutes: Record<string, ServerRoute> = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ API
  getVersion: {
    method: 'GET' as const,
    path: '/api/version',
    handler: async (request, h) => {
      return {
        version: API_VERSION,
        minSupported: MIN_SUPPORTED_VERSION
      };
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  createGame: {
    method: 'POST' as const,
    path: '/api/game/new',
    handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      const versionError = versionCheck(request, h);
      if (versionError) return versionError;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      try {
        const gameId = Date.now().toString();
        const { settings: s, level } = request.payload as GamePayload;
        const settings: GamePayload['settings'] = typeof s === 'string' ? JSON.parse(s) : s;

        if (!settings?.userId) {
          throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
        }

        const gameSettings = {
          AI_PLAYER: 'BALANCED',
          AI_OPPONENT: 'BALANCED',
          ...settings,
        };

        const rules = {
          OPEN: level < 2,
          SAME: level > 3,
          SAME_WALL: level > 4,
          PLUS: level > 5,
          COMBO: level > 6,
          ELEMENTAL: level > 7,
          SUDDEN_DEATH: level > 8,
        };

        const game = new Game(gameSettings, rules);
        let playerCardIds: string[] = [];

        if (settings?.playerCards && Array.isArray(settings.playerCards)) {
          playerCardIds = settings.playerCards.map(card => card.cardInfo.id);
        }

        if (playerCardIds.length !== 5) {
          throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å 5 –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${playerCardIds.length}`);
        }

        const gameState = game.initializeGame(playerCardIds) as GameState;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const activeGame = await createActiveGame(String(settings.userId), gameId, gameState, true);

        return {
          gameId,
          status: 'created',
          gameState,
          activeGame: {
            id: activeGame.id,
            gameId: activeGame.gameId,
          },
        };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', (error as Error).stack);
        return errorHandler({
          h,
          details: (error as Error).message,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É',
          stack: (error as Error).stack,
          code: 500,
        });
      }
    },
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  getGameState: {
    method: 'GET' as const,
    path: '/api/game/{gameId}',
    handler: async (request, h) => {
      const versionError = versionCheck(request, h);
      if (versionError) return versionError;

      const { gameId } = request.params;
      const telegramData = request.headers['telegram-data'];
      await logRequest(gameId, telegramData, request);

      if (nonExistentGames.has(gameId)) {
        return errorHandler({
          h,
          details: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.',
          error: 'Game not found',
          code: 410
        });
      }

      try {
        const activeGame = await getActiveGameByGameId(gameId);

        if (!activeGame) {
          nonExistentGames.add(gameId);
          return errorHandler({
            h,
            details: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            error: 'Game not found',
            code: 404
          });
        }

        const savedState = activeGame.gameState;
        const game = new Game(savedState.settings || {}, savedState.rules || {});

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã
        game.board = restoreCards(savedState.board, 'board');
        game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
        game.aiHand = restoreCards(savedState.aiHand, 'aiHand');
        game.originalPlayerCards = savedState.originalPlayerCards 
          ? restoreCards(savedState.originalPlayerCards, 'originalPlayerCards')
          : game.playerHand.map((card: Card) => card.clone());
        game.originalAiCards = savedState.originalAiCards
          ? restoreCards(savedState.originalAiCards, 'originalAiCards')
          : game.aiHand.map((card: Card) => card.clone());

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        game.currentTurn = savedState.currentTurn || 'player';
        game.playerScore = savedState.playerScore || 5;
        game.aiScore = savedState.aiScore || 5;
        game.gameStatus = savedState.gameStatus || 'playing';
        game.winner = savedState.winner || null;
        game.suddenDeathRound = savedState.suddenDeathRound || 0;
        game.boardElements = Array.isArray(savedState.boardElements) 
          ? savedState.boardElements 
          : Array(9).fill(null);
        game.cardExchange = savedState.cardExchange || null;

        return game.getState();
      } catch (error) {
        console.error('Error getting game state:', error);
        return errorHandler({
          h,
          details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã',
          error,
          code: 500
        });
      }
    }
  },

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
  playerMove: {
    method: 'POST' as const,
    path: '/api/game/{gameId}/player-move',
    handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      const versionError = versionCheck(request, h);
      if (versionError) return versionError;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      const { gameId } = request.params;
      const { cardIndex, position } = request.payload as PlayerMovePayload;

      try {
        const activeGame = await getActiveGameByGameId(gameId);

        if (!activeGame) {
          return errorHandler({
            h,
            details: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            error: 'Game not found',
            code: 404
          });
        }

        const savedState = activeGame.gameState;
        const game = new Game(savedState.settings || {}, savedState.rules || {});

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        game.board = restoreCards(savedState.board, 'board');
        game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
        game.aiHand = restoreCards(savedState.aiHand, 'aiHand');
        game.originalPlayerCards = savedState.originalPlayerCards
          ? restoreCards(savedState.originalPlayerCards, 'originalPlayerCards')
          : game.playerHand.map((card: Card) => card.clone());
        game.originalAiCards = savedState.originalAiCards
          ? restoreCards(savedState.originalAiCards, 'originalAiCards')
          : game.aiHand.map((card: Card) => card.clone());

        game.currentTurn = savedState.currentTurn || 'player';
        game.playerScore = savedState.playerScore || 5;
        game.aiScore = savedState.aiScore || 5;
        game.gameStatus = savedState.gameStatus || 'playing';
        game.winner = savedState.winner || null;
        game.suddenDeathRound = savedState.suddenDeathRound || 0;
        game.boardElements = Array.isArray(savedState.boardElements)
          ? savedState.boardElements
          : Array(9).fill(null);
        game.cardExchange = savedState.cardExchange || null;

        if (game.currentTurn !== 'player') {
          await sendLogToTelegram('‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ–≥–¥–∞ currentTurn !== player', {
            currentTurn: game.currentTurn,
            gameStatus: game.gameStatus,
          });
          return errorHandler({
            h,
            details: '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥',
            error: 'Not player\'s turn',
            code: 400,
          });
        }

        const result = game.makeMove(cardIndex, position);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await createActiveGame(game.settings.userId, gameId, game.getState());

        return {
          status: 'move completed',
          gameState: game.getState(),
          moveResult: result,
        };
      } catch (error) {
        console.error('‚ùå Error in player move:', {
          error,
          errorMessage: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined,
        });

        return errorHandler({
          h,
          details: error instanceof Error ? error.message : 'Error in player move',
          error: 'Error in player move',
          code: 400,
          stack: error instanceof Error ? error.stack : undefined,
        });
      }
    },
  },

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ AI
  aiMove: {
    method: 'GET' as const,
    path: '/api/game/{gameId}/ai-move',
    handler: async (request, h) => {
      const versionError = versionCheck(request, h);
      if (versionError) return versionError;

      const { gameId } = request.params;

      try {
        const activeGame = await getActiveGameByGameId(gameId);

        if (!activeGame) {
          return errorHandler({
            h,
            details: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            error: 'Game not found',
            code: 404
          });
        }

        const savedState = activeGame.gameState;
        const game = new Game(savedState.settings || {}, savedState.rules || {});

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        game.board = restoreCards(savedState.board, 'board');
        game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
        game.aiHand = restoreCards(savedState.aiHand, 'aiHand');
        game.originalPlayerCards = savedState.originalPlayerCards
          ? restoreCards(savedState.originalPlayerCards, 'originalPlayerCards')
          : game.playerHand.map((card: Card) => card.clone());
        game.originalAiCards = savedState.originalAiCards
          ? restoreCards(savedState.originalAiCards, 'originalAiCards')
          : game.aiHand.map((card: Card) => card.clone());

        game.currentTurn = savedState.currentTurn || 'player';
        game.playerScore = savedState.playerScore || 5;
        game.aiScore = savedState.aiScore || 5;
        game.gameStatus = savedState.gameStatus || 'playing';
        game.winner = savedState.winner || null;
        game.suddenDeathRound = savedState.suddenDeathRound || 0;
        game.boardElements = Array.isArray(savedState.boardElements)
          ? savedState.boardElements
          : Array(9).fill(null);
        game.cardExchange = savedState.cardExchange || null;

        if (game.currentTurn !== 'ai') {
          return h.response({
            error: 'Not AI\'s turn',
            details: {
              currentTurn: game.currentTurn,
            },
          }).code(400);
        }

        if (!game.aiHand || game.aiHand.length === 0) {
          await sendLogToTelegram('‚ùå –†—É–∫–∞ AI –ø—É—Å—Ç–∞', game.aiHand);
          return errorHandler({
            h,
            details: 'AI has no cards',
            error: 'Game state error',
            code: 400,
          });
        }

        try {
          const result = game.makeAIMove();
          await createActiveGame(game.settings.userId, gameId, game.getState());

          return {
            status: 'move completed',
            gameState: game.getState(),
            moveResult: result,
          };
        } catch (error) {
          await sendLogToTelegram('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞ AI', {
            error: error instanceof Error ? error.message : 'Unknown error',
            gameState: game.getState(),
          });
          throw error;
        }
      } catch (error) {
        console.error('‚ùå Error in AI move:', error);
        return errorHandler({
          h,
          details: error instanceof Error ? error.message : 'Error in AI move',
          error: 'Error in AI move',
          code: 400,
          stack: error instanceof Error ? error.stack : undefined,
        });
      }
    },
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç AI –¥–ª—è –æ–±–º–µ–Ω–∞
  getAvailableCards: {
    method: 'GET' as const,
    path: '/api/game/{gameId}/available-cards',
    handler: async (request, h) => {
      const { gameId } = request.params;
      
      const activeGame = await getActiveGameByGameId(gameId);

      if (!activeGame) {
        return errorHandler({
          h,
          details: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          error: 'Game not found',
          code: 404
        });
      }

      const savedState = activeGame.gameState;
      const game = new Game(savedState.settings || {}, savedState.rules || {});

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      game.board = restoreCards(savedState.board, 'board');
      game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
      game.aiHand = restoreCards(savedState.aiHand, 'aiHand');
      game.originalPlayerCards = savedState.originalPlayerCards
        ? restoreCards(savedState.originalPlayerCards, 'originalPlayerCards')
        : game.playerHand.map((card: Card) => card.clone());
      game.originalAiCards = savedState.originalAiCards
        ? restoreCards(savedState.originalAiCards, 'originalAiCards')
        : game.aiHand.map((card: Card) => card.clone());

      game.currentTurn = savedState.currentTurn || 'player';
      game.playerScore = savedState.playerScore || 5;
      game.aiScore = savedState.aiScore || 5;
      game.gameStatus = savedState.gameStatus || 'playing';
      game.winner = savedState.winner || null;
      game.suddenDeathRound = savedState.suddenDeathRound || 0;
      game.boardElements = Array.isArray(savedState.boardElements)
        ? savedState.boardElements
        : Array(9).fill(null);
      game.cardExchange = savedState.cardExchange || null;

      if (game.gameStatus !== 'finished' || game.winner !== 'player' || game.cardExchange) {
        return h.response({
          error: 'Cards are only available for winner player before exchange',
          details: {
            gameStatus: game.gameStatus,
            winner: game.winner,
            exchangePerformed: !!game.cardExchange,
          },
        }).code(400);
      }

      return {
        status: 'success',
        cards: game.originalAiCards.map((card: Card) => card.toClientObject(false)),
      };
    },
  },

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏
  exchangeCard: {
    method: 'POST' as const,
    path: '/api/game/{gameId}/exchange-card',
    handler: async (request, h) => {
      const versionError = versionCheck(request, h);
      if (versionError) return versionError;

      const { gameId } = request.params;
      const { cardId } = request.payload as ExchangeCardPayload || {};

      const activeGame = await getActiveGameByGameId(gameId);

      if (!activeGame) {
        return errorHandler({
          h,
          details: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          error: 'Game not found',
          code: 404
        });
      }

      const savedState = activeGame.gameState;
      const game = new Game(savedState.settings || {}, savedState.rules || {});

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      game.board = restoreCards(savedState.board, 'board');
      game.playerHand = restoreCards(savedState.playerHand, 'playerHand');
      game.aiHand = restoreCards(savedState.aiHand, 'aiHand');
      game.originalPlayerCards = savedState.originalPlayerCards
        ? restoreCards(savedState.originalPlayerCards, 'originalPlayerCards')
        : game.playerHand.map((card: Card) => card.clone());
      game.originalAiCards = savedState.originalAiCards
        ? restoreCards(savedState.originalAiCards, 'originalAiCards')
        : game.aiHand.map((card: Card) => card.clone());

      game.currentTurn = savedState.currentTurn || 'player';
      game.playerScore = savedState.playerScore || 5;
      game.aiScore = savedState.aiScore || 5;
      game.gameStatus = savedState.gameStatus || 'playing';
      game.winner = savedState.winner || null;
      game.suddenDeathRound = savedState.suddenDeathRound || 0;
      game.boardElements = Array.isArray(savedState.boardElements)
        ? savedState.boardElements
        : Array(9).fill(null);
      game.cardExchange = savedState.cardExchange || null;

      if (game.gameStatus !== 'finished' || game.winner === 'draw') {
        return errorHandler({
          h,
          details: `–û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º. –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: ${game.gameStatus}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${game.winner}`,
          error: '–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏',
          code: 400,
        });
      }

      if (game.cardExchange) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±–º–µ–Ω–µ
        if (!game.cardExchange.takenCard) {
          return errorHandler({
            h, details: '–ö–∞—Ä—Ç–∞ –æ–±–º–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', error: '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–º–µ–Ω–∞', code: 500,
          });
        }

        // –ï—Å–ª–∏ –æ–±–º–µ–Ω —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞
        return {
          status: 'success', exchange: {
            type: game.cardExchange.type,
            card: game.cardExchange.takenCard.toClientObject(false),
            message: game.cardExchange.message,
            gameId: gameId,
            isRepeated: true,
          },
        };
      }

      try {
        let exchangeResult;

        if (game.winner === 'player') {
          if (!cardId) {
            return errorHandler({
              h,
              details: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é –∫–∞—Ä—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
              error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞',
              code: 400,
            });
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç AI
          if (!game.originalAiCards || !Array.isArray(game.originalAiCards)) {
            console.error('‚ùå –û—à–∏–±–∫–∞ originalAiCards:', {
              originalAiCards: game.originalAiCards,
              isArray: Array.isArray(game.originalAiCards),
              type: typeof game.originalAiCards,
            });
            return errorHandler({
              h, details: '–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', error: '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', code: 500,
            });
          }

          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç AI –ø–µ—Ä–µ–¥ –æ–±–º–µ–Ω–æ–º:', {
            requestedCardId: cardId, availableCards: game.originalAiCards.map((c: Card | null) => ({
              id: c?.id, name: c?.name, isNull: c === null,
            })),
          });

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const deck = Card.createDeck();
          const deckCard = deck.find(c => c.id === cardId);

          if (!deckCard) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥–µ:', {
              requestedCardId: cardId, availableCardIds: deck.map(c => c.id),
            });
            return errorHandler({
              h, details: `–ö–∞—Ä—Ç–∞ —Å ID ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥–µ`, error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç—ã', code: 400,
            });
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö AI
          const selectedCard = game.originalAiCards.find((card: Card | null) => {
            if (!card) {
              console.log('‚ö†Ô∏è Found null card in originalAiCards');
              return false;
            }
            const isMatch = card.id === cardId;
            console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É ${card.id} —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π ${cardId}: ${isMatch}`);
            return isMatch;
          });

          if (!selectedCard) {
            return errorHandler({
              h,
              details: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ (${cardId}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä—É–∫–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞`,
              error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç—ã',
              code: 400,
            });
          }

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          const clonedCard = deckCard.clone();
          if (!clonedCard) {
            return errorHandler({
              h, details: '–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É', error: '–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã', code: 500,
            });
          }

          // –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
          clonedCard.owner = selectedCard.owner;
          clonedCard.position = selectedCard.position;

          exchangeResult = {
            type: 'player_win', takenCard: clonedCard, message: `–í—ã –∑–∞–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É ${selectedCard.name}!`,
          };
        } else {
          if (!game.getCardExchange || typeof game.getCardExchange !== 'function') {
            return errorHandler({
              h, details: '–ú–µ—Ç–æ–¥ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', error: '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', code: 500,
            });
          }

          exchangeResult = game.getCardExchange();
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–º–µ–Ω–∞
          if (!exchangeResult || !exchangeResult.takenCard) {
            return errorHandler({
              h, details: 'Invalid exchange result', error: 'Failed to perform card exchange', code: 500,
            });
          }
        }

        if (!exchangeResult) {
          return errorHandler({
            h, details: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏', error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–º–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', code: 400,
          });
        }

        game.cardExchange = exchangeResult;

        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const isWin = game.winner === 'player';
          const isDraw = game.winner === 'draw';
          const wonCards: string[] = isWin ? [exchangeResult.takenCard.id] : [];
          const lostCards: string[] = !isWin && !isDraw ? [exchangeResult.takenCard.id] : [];

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          await updateUserStats(game.settings.userId, isWin, isDraw, wonCards, lostCards);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
          if (isWin) {
            // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∫–∞—Ä—Ç—É AI
            await addCardToPlayer(game.settings.userId, exchangeResult.takenCard.id);
          } else if (!isDraw) {
            // AI –≤—ã–∏–≥—Ä–∞–ª - —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É —É –∏–≥—Ä–æ–∫–∞
            await deletePlayerCard(game.settings.userId, exchangeResult.takenCard.id);
          }

          // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          await deleteActiveGame(gameId);
        } catch (error) {
          console.error('Error updating game data:', error);
          return errorHandler({
            h, details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã', error, code: 500,
          });
        }

        return {
          status: 'success', exchange: {
            type: exchangeResult.type,
            card: exchangeResult.takenCard.toClientObject(false),
            message: exchangeResult.message,
            gameId: gameId,
          },
        };
      } catch (error) {
        console.error('Error in card exchange:', error);
        return errorHandler({
          h, details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–∞—Ä—Ç–∞–º–∏', error, code: 500,
        });
      }
    },
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
  updateGameStats: {
    method: 'POST' as const, path: '/api/game/{gameId}/stats', handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      const { gameId } = request.params;
      const { statsId, isWin, isDraw, wonCards = [], lostCards = [] } = request.payload as UpdateGameStatsPayload;

      if (!statsId) {
        return h.response({
          error: 'Stats ID is required', details: {
            message: 'Please provide userId in the request payload',
          },
        }).code(400);
      }

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        // @ts-ignore
        const stats = await updateUserStats(statsId, isWin, isDraw, wonCards, lostCards);

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
          await deleteActiveGame(gameId);
        } catch (error) {
          console.error('Error deleting active game:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        }

        return {
          status: 'success', stats,
        };
      } catch (error) {
        console.error('Error updating game stats:', error);
        return errorHandler({
          h, details: 'Error updating game stats', error, code: 500,
        });
      }
    },
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
  deleteGame: {
    method: 'DELETE' as const, path: '/api/game/{gameId}', handler: async (request, h) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
      if (MAINTENANCE_MODE) {
        return errorHandler({
          h,
          details: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.',
          error: 'Maintenance',
          code: 503
        });
      }

      const { gameId } = request.params;

      try {
        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await deleteActiveGame(gameId);

        return {
          status: 'success',
          message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
          gameId
        };
      } catch (error) {
        console.error('Error deleting game:', error);
        return errorHandler({
          h,
          details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã',
          error,
          code: 500
        });
      }
    }
  },
};
