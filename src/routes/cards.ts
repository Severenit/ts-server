import { Card } from '../game/core/card.js';
import { getPlayerCards, restoreUserCards } from '../keystone-api/cards.js';
import { Request, ResponseToolkit, ServerRoute } from '@hapi/hapi';
import { errorHandler } from '../utils/error.js';
import { versionCheck } from '../utils/versionCheck.js';

export const cardsRoutes: Record<string, ServerRoute> = {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç
    getStarterCards: {
        method: 'GET' as const,
        path: '/api/cards/starter',
        handler: async (request: Request, h: ResponseToolkit) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      const versionError = versionCheck(request, h);
      if (versionError) return versionError;

            console.log('Starting /api/cards/starter handler');
            try {
                const deck = Card.createDeck();
                const starterCards = Card.getStarterCards();
                
                const response = {
                    status: 'success',
                    cards: starterCards.map(card => card.toClientObject(false))
                };
                
                return response;
            } catch (e) {
                return errorHandler({
                    h,
                    details: 'Failed to get starter cards',
                    error: e,
                    code: 500,
                });
            }
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –∏–≥—Ä–µ
    getAllCards: {
        method: 'GET' as const,
        path: '/api/cards/all',
        handler: async (request: Request, h: ResponseToolkit) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
            const versionError = versionCheck(request, h);
            if (versionError) return versionError;

            try {
                const deck = Card.createDeck();
                
                const response = {
                    status: 'success',
                    cards: deck.map(card => card.toClientObject(false))
                };
                
                return response;
            } catch (e) {
                return errorHandler({
                    h,
                    details: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã',
                    error: e,
                    code: 500,
                });
            }
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserCards: {
        method: 'GET' as const,
        path: '/api/player/{telegramId}/cards',
        handler: async (request: Request, h: ResponseToolkit) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      const versionError = versionCheck(request, h);
      if (versionError) return versionError;
      
            try {
                const { telegramId } = request.params;
                // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                const cards = await getPlayerCards(telegramId);
                return {
                    status: 'success',
                    cards: cards
                };

            } catch (e) {
                console.error('Error getting player cards:', e);
                return errorHandler({
                    h,
                    details: 'Failed to get starter cards',
                    error: e,
                    code: 400,
                });
            }
        }
    },

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    restoreCards: {
        method: 'POST' as const,
        path: '/api/player/{telegramId}/restore-cards',
        handler: async (request: Request, h: ResponseToolkit) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
            const versionError = versionCheck(request, h);
            if (versionError) return versionError;
      
            try {
                const { telegramId } = request.params;
                console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const currentCards = await getPlayerCards(telegramId);
                console.log('üéÆ –¢–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentCards.length, '—à—Ç—É–∫');
                
                // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ 20 –∫–∞—Ä—Ç, –Ω–µ –¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                if (currentCards.length >= 20) {
                    console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ä—Ç:', currentCards.length);
                    return h.response({
                        status: 'error',
                        message: '–£ –≤–∞—Å —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç (20 –∏–ª–∏ –±–æ–ª—å—à–µ)'
                    }).code(400);
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã
                console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç');
                const restoredCards = await restoreUserCards(telegramId);
                console.log('‚úÖ –ö–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', restoredCards.length, '—à—Ç—É–∫');
                
                return {
                    status: 'success',
                    message: '–ö–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
                    cards: restoredCards
                };
            } catch (e: unknown) {
                const error = e as Error;
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç:', error);
                console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                    name: error.name,
                    message: error.message,
                    stack: error.stack
                });
                return errorHandler({
                    h,
                    details: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—ã',
                    error,
                    code: 400,
                });
            }
        }
    }
};