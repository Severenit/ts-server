import {
  CHECK_ACTIVE_GAME,
  CREATE_ACTIVE_GAME,
  DELETE_ACTIVE_GAME,
  GET_ACTIVE_GAME, GET_USER_STATS,
  UPDATE_ACTIVE_GAME, UPDATE_USER_STATS,
} from '../graphql/game.js';
import { client } from './index.js';
import { ActiveGame, GameState } from '../types/game.js';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –ø–æ –µ—ë ID
 * @param {string} gameId - ID –∏–≥—Ä—ã
 * @returns {Promise<Object|null>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ –∏–ª–∏ null, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
export async function getActiveGameByGameId(gameId: string) {
  try {
    console.log('üéÆ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    console.log('ID –∏–≥—Ä—ã:', gameId);

    const data = await client.request<{ activeGame: any }>(GET_ACTIVE_GAME, { gameId });

    if (!data.activeGame) {
      console.log('üéÆ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã —Å ID:', gameId);
      return null;
    }

    console.log('üéÆ –ù–∞–∏ÃÜ–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞:', data.activeGame);
    return data.activeGame;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} gameId - ID –∏–≥—Ä—ã
 * @param {Object} gameState - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
 */
export async function createNewActiveGame(userId: string, gameId: string, gameState: any) {
  try {
    console.log('üéÆ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    const createData = await client.request<{ createActiveGame: ActiveGame }>(CREATE_ACTIVE_GAME, {
      userId,
      gameId,
      initialState: {
        ...gameState,
        gameId
      }
    });

    return createData.createActiveGame;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} gameId - ID –∏–≥—Ä—ã
 * @param {Object} gameState - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
 */
export async function updateActiveGame(gameId: string, gameState: GameState,) {
  try {
    console.log('üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    const updateData = await client.request<{ updateActiveGame: ActiveGame }>(UPDATE_ACTIVE_GAME, {
      gameId,
      initialState: {
        ...gameState,
        gameId
      }
    });

    return updateData.updateActiveGame;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} gameId - ID –∏–≥—Ä—ã
 * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @param {boolean} [forceCreate=false] - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
 */
export async function createActiveGame(userId: string, gameId: string, gameState: any, forceCreate = false) {
  try {
    if (forceCreate) {
      return await createNewActiveGame(userId, gameId, gameState);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
    const checkResult = await client.request<{ activeGame: ActiveGame }>(CHECK_ACTIVE_GAME, { gameId });

    if (checkResult.activeGame) {
      return await updateActiveGame(gameId, gameState);
    } else {
      return await createNewActiveGame(userId, gameId, gameState);
    }
  } catch (error) {
    console.error('‚ùå Error in createActiveGame:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param {string} gameId - ID –∏–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã
 */
export async function deleteActiveGame(gameId: string) {
  try {
    console.log('üéÆ Deleting active game from database...');
    console.log('Game ID:', gameId);

    const data = await client.request<{ deleteActiveGame: { id: string; gameId: string; } }>(DELETE_ACTIVE_GAME, { gameId });

    console.log('üéÆ Active game deleted:', data);
    return data.deleteActiveGame;
  } catch (error) {
    console.error('‚ùå Error deleting active game:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {boolean} isWin - –ü–æ–±–µ–¥–∏–ª –ª–∏ –∏–≥—Ä–æ–∫
 * @param {boolean} isDraw - –ù–∏—á—å—è –ª–∏
 * @param {string[]} wonCards - ID –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
 * @param {string[]} lostCards - ID –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
 * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
export async function updateUserStats(statsId: string, isWin: boolean, isDraw: boolean, wonCards: string[] = [], lostCards: string[] = []) {
  try {
    console.log('üéÆ Updating user stats...');
    const stats = await client.request<{ userStats: any }>(GET_USER_STATS, { statsId });

    if (!stats.userStats) {
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
    const wins = isWin ? 1 : 0;
    const draws = isDraw ? 1 : 0;
    const losses = !isWin && !isDraw ? 1 : 0;

    const cardsWin =  Array.isArray(stats.userStats.cards_won) ? [...stats.userStats.cards_won, ...wonCards] : [...wonCards];
    const cardsLost =  Array.isArray(stats.userStats.cards_lost) ? [...stats.userStats.cards_lost, ...lostCards] : [...lostCards];

    const data = await client.request<{ updateUserStats: any }>(UPDATE_USER_STATS, {
      statsId,
      totalGames:  Number(stats.userStats.total_games) + 1,
      wins: Number(stats.userStats.wins) + wins,
      draws: Number(stats.userStats.draws) + draws,
      losses: Number(stats.userStats.losses) + losses,
      wonCards: cardsWin,
      lostCards: cardsLost,
    });

    console.log('üéÆ User stats updated:', data.updateUserStats);
    return data.updateUserStats;
  } catch (error) {
    console.error('‚ùå Error updating user stats:', error);
    throw error;
  }
}
