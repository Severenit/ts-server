// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
import { client } from './index.js';
import { ADD_CARD_TO_USER, CREATE_USER, GET_USER } from '../graphql/user.js';
import bot from '../bot.js';
import { Card } from '../game/core/card.js';
import { User } from '../types/user.js';
import { generateInitData } from '../utils/generateInitData.js';

interface UserResponse {
  user: User | null;
}

interface GetOrCreatePlayerProps {
  id: number;
  username?: string;
  first_name?: string;
  last_name?: string;
  photo_url?: string;
  hash?: string;
  is_bot?: boolean;
}

export async function getOrCreatePlayer(telegramData: GetOrCreatePlayerProps) {
  console.log('telegramData:', telegramData);
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUserData = await client.request<UserResponse>(GET_USER, {
      telegram_id: telegramData.id.toString(),
    });

    if (existingUserData.user) {
      const { playerCards, ...userData } = existingUserData.user;

      return {
        ...userData,
        isNewPlayer: false,
        cards: playerCards.map(card => card.cardId)
      };
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    const defaultHash = 'tripal_triad_' + Date.now();

    const photoUrl = telegramData.first_name && telegramData.last_name ? `https://avatar.iran.liara.run/username?username=${telegramData.first_name}+${telegramData.last_name}` : 'https://avatar.iran.liara.run/public';

    const userData = {
      telegram_id: telegramData.id.toString(),
      username: telegramData.username || 'anonymous',
      telegram_hash: telegramData.hash || defaultHash,
      first_name: telegramData.first_name || '',
      last_name: telegramData.last_name || '',
      photo_url: telegramData.photo_url || photoUrl,
      stats: {
        create: {
          total_games: 0,
          wins: 0,
          losses: 0,
          draws: 0,
          cards_won: 0,
          cards_lost: 0
        }
      }
    };
    console.log('üåê: userData:', userData);
    try {
      const newUserData = await client.request<{ createUser: User }>(CREATE_USER, { userData });
      console.log('üåê: newUserData:', newUserData);

      const newUser = newUserData.createUser;

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üåê: Adding starter cards for new user:', newUser.id);
      const starterCards = Card.getStarterCards();
      console.log('üåê: Selected starter cards:', starterCards);

      try {
        const addCardPromises = starterCards.map(card =>
          addCardToPlayer(newUser.id, card.id)
            .then(addedCard => {
              console.log(`üåê: Successfully added card ${card.id} for new user`);
              return addedCard;
            })
            .catch(error => {
              console.error(`‚ùå: Failed to add card ${card.id}:`, error);
              throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            })
        );

        const addedCards = await Promise.all(addCardPromises);
        console.log('üåê: Successfully added all starter cards:', addedCards);

        if (addedCards.length !== 10) {
          throw new Error(`‚ùå: Expected 10 cards to be added, but got ${addedCards.length}`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID –∫–∞—Ä—Ç
        const userWithCards = await client.request<UserResponse>(GET_USER, {
          telegram_id: newUser.telegram_id
        });

        if (!userWithCards.user) {
          throw new Error('‚ùå: Failed to get user with cards');
        }

        try {
          await bot.sendMessage(userWithCards.user.id, 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Triple Triad!');
        } catch (error) {
          console.error('‚ùå: Error sending welcome TG message:', error);
        }

        const { playerCards, ...userData } = userWithCards.user;
        const result = {
          ...userData,
          isNewPlayer: true,
          cards: addedCards
        };

        return result;
      } catch (error) {
        console.error('‚ùå: Error adding starter cards:', error);
        throw error;
      }
    } catch (error) {
      console.error('‚ùå: Error creating user:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
  } catch (error) {
    console.error('‚ùå: Error in getOrCreatePlayer:', error);
    throw error;
  }
}

async function addCardToPlayer(playerId: string, cardId: string) {
  try {
    console.log(`üåê: Attempting to add card ${cardId} to player ${playerId}`);
    const data = await client.request<{ createPlayerCard: { cardId: string } }>(ADD_CARD_TO_USER, {
      userId: playerId,
      cardId: cardId.toString()
    });

    if (!data || !data.createPlayerCard || !data.createPlayerCard.cardId) {
      throw new Error(`‚ùå: Failed to add card ${cardId}: Invalid response from server`);
    }

    console.log(`üåê: Successfully added card ${cardId} to player ${playerId}`);
    return data.createPlayerCard.cardId;
  } catch (error) {
    console.error(`‚ùå: Error adding card ${cardId} to player ${playerId}:`, error);
    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
  }
}