import Hapi, { ResponseToolkit } from '@hapi/hapi';
import Inert from '@hapi/inert';
import axios from "axios";
import path from 'path';
import bot from "./bot.js";
import { Update } from "node-telegram-bot-api";
import { authRoutes } from './routes/auth.js';
import { cardsRoutes } from './routes/cards.js';

interface WebhookInfo {
  ok: boolean;
  result: {
    url: string;
  };
}

const WEBHOOK_URL = `${process.env.WEBHOOK_URL}/webhook`;
const IMG = /\.(jpg|jpeg|gif|png)(\?v=\d+\.\d+\.\d+)?$/;

async function ensureWebhook() {
    try {
      const response = await axios.get<WebhookInfo>(
        `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`
      );
  
      if (!response.data.result.url || response.data.result.url !== WEBHOOK_URL) {
        console.log(`Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Webhook –Ω–∞: ${WEBHOOK_URL}`);
        await bot.setWebHook(WEBHOOK_URL);
        console.log("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
      } else {
        console.log("Webhook —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω:", response.data.result.url);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Webhook:", error);
    }
  }
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ `server.ts` –∏ `index.ts`)
export const createServer = async () => {
  const server = Hapi.server({
    port: process.env.PORT || 3000,
    host: process.env.ENV === "development" ? "localhost" : "0.0.0.0",
    routes: {
      cors: {
        origin: ['*'],
        credentials: true,
        additionalExposedHeaders: ['content-encoding'],
        exposedHeaders: ['content-encoding'],
        additionalHeaders: ['telegram-data']
      },
      response: {
        emptyStatusCode: 204
      }
    }
  });

  await server.register(Inert);

  // API-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
  server.route({
    method: "GET",
    path: "/",
    handler: () => {
      return { status: "ok", message: "API —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ" };
    },
  });

  // Webhook –¥–ª—è Telegram
  server.route({
    method: 'POST',
    path: '/webhook',
    handler: async (request, h) => {
      try {
        console.log('Webhook received:', request.payload);
        await bot.processUpdate(request.payload as Update);
        return h.response({ success: true }).code(200);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook:', error);
        return h.response({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook' }).code(500);
      }
    },
  });

  // Assets
  server.route({
    method: 'GET',
    path: '/img/{path*}',
    handler: (request, h) => {
      if (IMG.test(request.path)) {
        console.log(request.path);
        return h.file(path.join(process.cwd(), 'src', 'game', request.path));
      }
      return h.response('File not found').code(404);
    },
  });

  const routes = [
    ...Object.values(authRoutes),
    ...Object.values(cardsRoutes)
  ];

  server.route(routes);
  
  await server.initialize(); // –ù–µ —Å—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä —Å—Ä–∞–∑—É (–¥–ª—è Vercel)
  await ensureWebhook(); // üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Webhook
  
  return server;
};